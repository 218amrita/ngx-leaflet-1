{"version":3,"sources":["leaflet/layers/leaflet-control-layers.directive.ts"],"names":[],"mappings":"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","file":"leaflet-control-layers.directive.js","sourcesContent":["import { Directive, Input, OnChanges, OnInit, SimpleChange } from '@angular/core';\n\nimport * as L from 'leaflet';\n\nimport { LeafletDirective } from '../core/leaflet.directive';\n\n\n@Directive({\n\tselector: '[leafletLayersControl]'\n})\nexport class LeafletLayersControlDirective\n\timplements OnChanges, OnInit {\n\n\tleafletDirective: LeafletDirective;\n\n\t// Reference to the primary map object\n\tmap: L.Map;\n\n\t// The layers control object\n\tlayersControl: L.Control.Layers;\n\n\t// Control Layers Configuration\n\t@Input('leafletLayersControl') layersControlConfig: any;\n\n\t@Input('leafletLayersControlOptions') layersControlOptions: any;\n\n\n\tconstructor(leafletDirective: LeafletDirective) {\n\t\tthis.leafletDirective = leafletDirective;\n\t}\n\n\tngOnInit() {\n\n\t\t// Set up all the initial settings\n\t\tthis.initializeLayersControl(this.layersControlConfig, this.layersControlOptions);\n\n\t}\n\n\tngOnChanges(changes: { [key: string]: SimpleChange }) {\n\n\t\t// Set the layers\n\t\tif (changes['layersControlCfg']) {\n\t\t\tthis.setLayersControlConfig(\n\t\t\t\tchanges['layersControlCfg'].currentValue,\n\t\t\t\tchanges['layersControlCfg'].previousValue);\n\t\t}\n\n\t}\n\n\tprivate initializeLayersControl(controlConfig: any, controlOptions: any) {\n\n\t\tlet map = this.leafletDirective.getMap();\n\n\t\tlet baseLayers = controlConfig.baseLayers || {};\n\t\tlet overlays = controlConfig.overlays || {};\n\n\t\tif (null != map) {\n\t\t\tthis.layersControl = L.control.layers(baseLayers, overlays, controlOptions)\n\t\t\t\t.addTo(map);\n\t\t}\n\t}\n\n\tprivate setLayersControlConfig(newConfig: any, prevConfig: any) {\n\n\t\tlet map = this.leafletDirective.getMap();\n\n\t\tif (null != map) {\n\n\t\t\tlet toRemove: {};\n\t\t\tlet baseLayers: {};\n\t\t\tlet overlays: {};\n\n\t\t\t// Figure out which layers need to be removed (prev - new)\n\t\t\ttoRemove = this.mergeMaps(\n\t\t\t\tthis.mapSubtract(prevConfig.baseLayers, newConfig.baseLayers),\n\t\t\t\tthis.mapSubtract(prevConfig.overlays, newConfig.overlays));\n\n\t\t\t// Figure out which layers need to be added (new - prev)\n\t\t\tbaseLayers = this.mapSubtract(newConfig.baseLayers, prevConfig.baseLayers);\n\t\t\toverlays = this.mapSubtract(newConfig.overlays, prevConfig.overlays);\n\n\t\t\t// Do the actual removal and addition\n\t\t\tfor (let k in toRemove) {\n\t\t\t\tif (toRemove.hasOwnProperty(k)) {\n\t\t\t\t\tlet l: L.Layer = toRemove[k];\n\t\t\t\t\tthis.layersControl.removeLayer(l);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfor (let k in baseLayers) {\n\t\t\t\tif (baseLayers.hasOwnProperty(k)) {\n\t\t\t\t\tlet l: L.Layer = baseLayers[k];\n\t\t\t\t\tthis.layersControl.addBaseLayer(l, k);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfor (let k in overlays) {\n\t\t\t\tif (overlays.hasOwnProperty(k)) {\n\t\t\t\t\tlet l: L.Layer = overlays[k];\n\t\t\t\t\tthis.layersControl.addOverlay(l, k);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t}\n\n\tprivate mergeMaps(aMap: {}, bMap: {}) {\n\t\tlet toReturn = {};\n\n\t\tif (null != aMap) {\n\t\t\tfor (let k in aMap) {\n\t\t\t\tif (aMap.hasOwnProperty(k)) {\n\t\t\t\t\ttoReturn[k] = aMap[k];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (null != bMap) {\n\t\t\tfor (let k in bMap) {\n\t\t\t\tif (bMap.hasOwnProperty(k)) {\n\t\t\t\t\ttoReturn[k] = bMap[k];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn toReturn;\n\t}\n\n\tprivate mapSubtract(aMap: {}, bMap: {}) {\n\t\tlet toReturn = {};\n\n\t\tif (null != aMap) {\n\n\t\t\t// Copy all of aMap into toReturn\n\t\t\tfor (let k in aMap) {\n\t\t\t\tif (aMap.hasOwnProperty(k)) {\n\t\t\t\t\ttoReturn[k] = aMap[k];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// If there's a bMap, delete all bMap keys from aMap\n\t\t\tif (null != bMap) {\n\t\t\t\tfor (let k in bMap) {\n\t\t\t\t\tif (bMap.hasOwnProperty(k)) {\n\t\t\t\t\t\tdelete toReturn[k];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn toReturn;\n\t}\n\n}\n"]}