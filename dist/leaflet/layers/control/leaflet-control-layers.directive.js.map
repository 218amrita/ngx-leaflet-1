{"version":3,"sources":["leaflet/layers/control/leaflet-control-layers.directive.ts"],"names":[],"mappings":";AAAA,qBAAkE,eAAe,CAAC,CAAA;AAIlF,kCAAiC,8BAA8B,CAAC,CAAA;AAChE,0CAAwC,sCAAsC,CAAC,CAAA;AAC/E,+CAA4C,kCAAkC,CAAC,CAAA;AAM/E;IAWC,uCAAY,gBAAkC;QAC7C,IAAI,CAAC,gBAAgB,GAAG,IAAI,mDAAuB,CAAC,gBAAgB,CAAC,CAAC;QACtE,IAAI,CAAC,aAAa,GAAG,IAAI,4DAA2B,EAAE,CAAC;IACxD,CAAC;IAED,gDAAQ,GAAR;QAEC,IAAI,CAAC,gBAAgB,CAAC,IAAI,EAAE,CAAC;QAE7B,kCAAkC;QAClC,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,IAAI,CAAC,mBAAmB,EAAE,IAAI,CAAC,oBAAoB,CAAC,CAAC;IAE9E,CAAC;IAED,mDAAW,GAAX,UAAY,OAAwC;QAEnD,iBAAiB;QACjB,EAAE,CAAC,CAAC,OAAO,CAAC,kBAAkB,CAAC,CAAC,CAAC,CAAC;YACjC,IAAI,CAAC,aAAa,CAAC,sBAAsB,CACxC,OAAO,CAAC,kBAAkB,CAAC,CAAC,YAAY,EACxC,OAAO,CAAC,kBAAkB,CAAC,CAAC,aAAa,CAAC,CAAC;QAC7C,CAAC;IAEF,CAAC;IA9BD;QAAC,YAAK,CAAC,sBAAsB,CAAC;;8EAAA;IAE9B;QAAC,YAAK,CAAC,6BAA6B,CAAC;;+EAAA;IATtC;QAAC,gBAAS,CAAC;YACV,QAAQ,EAAE,wBAAwB;SAClC,CAAC;;qCAAA;IAqCF,oCAAC;AAAD,CApCA,AAoCC,IAAA;AApCY,qCAA6B,gCAoCzC,CAAA","file":"leaflet-control-layers.directive.js","sourcesContent":["import { Directive, Input, OnChanges, OnInit, SimpleChange } from '@angular/core';\n\nimport * as L from 'leaflet';\n\nimport { LeafletDirective } from '../../core/leaflet.directive';\nimport { LeafletDirectiveWrapper } from '../../core/leaflet.directive.wrapper';\nimport { LeafletControlLayersWrapper } from './leaflet-control-layers.wrapper';\n\n\n@Directive({\n\tselector: '[leafletLayersControl]'\n})\nexport class LeafletLayersControlDirective\n\timplements OnChanges, OnInit {\n\n\t// Control Layers Configuration\n\t@Input('leafletLayersControl') layersControlConfig: any;\n\n\t@Input('leafletLayersControlOptions') layersControlOptions: any;\n\n\tprivate controlLayers: LeafletControlLayersWrapper;\n\tprivate leafletDirective: LeafletDirectiveWrapper;\n\n\tconstructor(leafletDirective: LeafletDirective) {\n\t\tthis.leafletDirective = new LeafletDirectiveWrapper(leafletDirective);\n\t\tthis.controlLayers = new LeafletControlLayersWrapper();\n\t}\n\n\tngOnInit() {\n\n\t\tthis.leafletDirective.init();\n\n\t\t// Set up all the initial settings\n\t\tthis.controlLayers.init(this.layersControlConfig, this.layersControlOptions);\n\n\t}\n\n\tngOnChanges(changes: { [key: string]: SimpleChange }) {\n\n\t\t// Set the layers\n\t\tif (changes['layersControlCfg']) {\n\t\t\tthis.controlLayers.setLayersControlConfig(\n\t\t\t\tchanges['layersControlCfg'].currentValue,\n\t\t\t\tchanges['layersControlCfg'].previousValue);\n\t\t}\n\n\t}\n\n}\n"]}