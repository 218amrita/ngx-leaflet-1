{"version":3,"sources":["leaflet/layers/control/leaflet-control-layers.wrapper.ts"],"names":[],"mappings":";AAAA,IAAY,CAAC,WAAM,SAAS,CAAC,CAAA;AAE7B,6BAA4B,yBAAyB,CAAC,CAAA;AAEtD,iDAAwC,oCAAoC,CAAC,CAAA;AAE7E;IAAA;IA+DA,CAAC;IA1DO,sDAAgB,GAAvB;QACC,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC;IAC3B,CAAC;IAEM,0CAAI,GAAX,UAAY,aAAkB,EAAE,cAAmB;QAElD,IAAI,UAAU,GAAG,aAAa,CAAC,UAAU,IAAI,EAAE,CAAC;QAChD,IAAI,QAAQ,GAAG,aAAa,CAAC,QAAQ,IAAI,EAAE,CAAC;QAE5C,IAAI,CAAC,aAAa,GAAG,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,UAAU,EAAE,QAAQ,EAAE,cAAc,CAAC,CAAC;QAE5E,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC;IAC3B,CAAC;IAEM,4DAAsB,GAA7B,UAA+B,SAAqC,EAAE,UAAsC;QAE3G,EAAE,CAAC,CAAC,IAAI,IAAI,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC;YAChC,MAAM,CAAC,IAAI,0DAAuB,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC;QAC5C,CAAC;QAED,IAAI,QAAgC,CAAC;QACrC,IAAI,UAAkC,CAAC;QACvC,IAAI,QAAgC,CAAC;QAErC,0DAA0D;QAC1D,QAAQ,GAAG,0BAAW,CAAC,SAAS,CAC/B,0BAAW,CAAC,WAAW,CAAC,UAAU,CAAC,UAAU,EAAE,SAAS,CAAC,UAAU,CAAC,EACpE,0BAAW,CAAC,WAAW,CAAC,UAAU,CAAC,QAAQ,EAAE,SAAS,CAAC,QAAQ,CAAC,CAAC,CAAC;QAEnE,wDAAwD;QACxD,UAAU,GAAG,0BAAW,CAAC,WAAW,CAAC,SAAS,CAAC,UAAU,EAAE,UAAU,CAAC,UAAU,CAAC,CAAC;QAClF,QAAQ,GAAG,0BAAW,CAAC,WAAW,CAAC,SAAS,CAAC,QAAQ,EAAE,UAAU,CAAC,QAAQ,CAAC,CAAC;QAE5E,qCAAqC;QACrC,GAAG,CAAC,CAAC,IAAI,CAAC,IAAI,QAAQ,CAAC,CAAC,CAAC;YACxB,EAAE,CAAC,CAAC,QAAQ,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;gBAChC,IAAI,CAAC,GAAY,QAAQ,CAAC,CAAC,CAAC,CAAC;gBAC7B,IAAI,CAAC,aAAa,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;YACnC,CAAC;QACF,CAAC;QAED,GAAG,CAAC,CAAC,IAAI,CAAC,IAAI,UAAU,CAAC,CAAC,CAAC;YAC1B,EAAE,CAAC,CAAC,UAAU,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;gBAClC,IAAI,CAAC,GAAY,UAAU,CAAC,CAAC,CAAC,CAAC;gBAC/B,IAAI,CAAC,aAAa,CAAC,YAAY,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;YACvC,CAAC;QACF,CAAC;QAED,GAAG,CAAC,CAAC,IAAI,CAAC,IAAI,QAAQ,CAAC,CAAC,CAAC;YACxB,EAAE,CAAC,CAAC,QAAQ,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;gBAChC,IAAI,CAAC,GAAY,QAAQ,CAAC,CAAC,CAAC,CAAC;gBAC7B,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;YACrC,CAAC;QACF,CAAC;QAED,MAAM,CAAC,IAAI,0DAAuB,CAAC,QAAQ,EAAE,0BAAW,CAAC,SAAS,CAAC,UAAU,EAAE,QAAQ,CAAC,CAAC,CAAC;IAC3F,CAAC;IAEF,kCAAC;AAAD,CA/DA,AA+DC,IAAA;AA/DY,mCAA2B,8BA+DvC,CAAA","file":"leaflet-control-layers.wrapper.js","sourcesContent":["import * as L from 'leaflet';\n\nimport { LeafletUtil } from '../../core/leaflet.util';\nimport { LeafletControlLayersConfig } from './leaflet-control-layers-config.model';\nimport { LeafletLayersObjectDiff } from './leaflet-layers-object-diff.model';\n\nexport class LeafletControlLayersWrapper {\n\n\t// The layers control object\n\tprotected layersControl: L.Control.Layers;\n\n\tpublic getLayersControl() {\n\t\treturn this.layersControl;\n\t}\n\n\tpublic init(controlConfig: any, controlOptions: any): L.Control.Layers {\n\n\t\tlet baseLayers = controlConfig.baseLayers || {};\n\t\tlet overlays = controlConfig.overlays || {};\n\n\t\tthis.layersControl = L.control.layers(baseLayers, overlays, controlOptions);\n\n\t\treturn this.layersControl;\n\t}\n\n\tpublic setLayersControlConfig( newConfig: LeafletControlLayersConfig, prevConfig: LeafletControlLayersConfig): LeafletLayersObjectDiff {\n\n\t\tif (null == this.layersControl) {\n\t\t\treturn new LeafletLayersObjectDiff({}, {});\n\t\t}\n\n\t\tlet toRemove: L.control.LayersObject;\n\t\tlet baseLayers: L.control.LayersObject;\n\t\tlet overlays: L.control.LayersObject;\n\n\t\t// Figure out which layers need to be removed (prev - new)\n\t\ttoRemove = LeafletUtil.mergeMaps(\n\t\t\tLeafletUtil.mapSubtract(prevConfig.baseLayers, newConfig.baseLayers),\n\t\t\tLeafletUtil.mapSubtract(prevConfig.overlays, newConfig.overlays));\n\n\t\t// Figure out which layers need to be added (new - prev)\n\t\tbaseLayers = LeafletUtil.mapSubtract(newConfig.baseLayers, prevConfig.baseLayers);\n\t\toverlays = LeafletUtil.mapSubtract(newConfig.overlays, prevConfig.overlays);\n\n\t\t// Do the actual removal and addition\n\t\tfor (let k in toRemove) {\n\t\t\tif (toRemove.hasOwnProperty(k)) {\n\t\t\t\tlet l: L.Layer = toRemove[k];\n\t\t\t\tthis.layersControl.removeLayer(l);\n\t\t\t}\n\t\t}\n\n\t\tfor (let k in baseLayers) {\n\t\t\tif (baseLayers.hasOwnProperty(k)) {\n\t\t\t\tlet l: L.Layer = baseLayers[k];\n\t\t\t\tthis.layersControl.addBaseLayer(l, k);\n\t\t\t}\n\t\t}\n\n\t\tfor (let k in overlays) {\n\t\t\tif (overlays.hasOwnProperty(k)) {\n\t\t\t\tlet l: L.Layer = overlays[k];\n\t\t\t\tthis.layersControl.addOverlay(l, k);\n\t\t\t}\n\t\t}\n\n\t\treturn new LeafletLayersObjectDiff(toRemove, LeafletUtil.mergeMaps(baseLayers, overlays));\n\t}\n\n}\n"]}