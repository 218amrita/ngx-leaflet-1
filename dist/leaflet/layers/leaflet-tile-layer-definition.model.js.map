{"version":3,"sources":["leaflet/layers/leaflet-tile-layer-definition.model.ts"],"names":[],"mappings":";AAAA;IAEC,oCACQ,IAAY,EACZ,GAAW,EACX,OAAY;QAFZ,SAAI,GAAJ,IAAI,CAAQ;QACZ,QAAG,GAAH,GAAG,CAAQ;QACX,YAAO,GAAP,OAAO,CAAK;IAAI,CAAC;IAGzB;;;;;;OAMG;IACW,0CAAe,GAA7B,UAA8B,QAAoC;QACjE,IAAI,KAAkB,CAAC;QAEvB,MAAM,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;YACvB,KAAK,KAAK;gBACT,KAAK,GAAG,CAAC,CAAC,SAAS,CAAC,QAAQ,CAAC,GAAG,EAAG,QAAQ,CAAC,OAAO,CAAC,CAAC;gBACrD,KAAK,CAAC;YACP,KAAK,KAAK,CAAC;YACX;gBACC,KAAK,GAAG,CAAC,CAAC,SAAS,CAAC,GAAG,CAAC,QAAQ,CAAC,GAAG,EAAG,QAAQ,CAAC,OAAO,CAAC,CAAC;gBACzD,KAAK,CAAC;QACR,CAAC;QAED,MAAM,CAAC,KAAK,CAAC;IACd,CAAC;IAED;;;;;;OAMG;IACW,2CAAgB,GAA9B,UAA+B,SAA0D;QACxF,IAAI,MAAM,GAAqC,EAAE,CAAC;QAElD,GAAG,CAAC,CAAC,IAAI,CAAC,IAAI,SAAS,CAAC,CAAC,CAAC;YACzB,EAAE,CAAC,CAAC,SAAS,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;gBACjC,MAAM,CAAC,CAAC,CAAC,GAAG,CAAC,0BAA0B,CAAC,eAAe,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YACxE,CAAC;QACF,CAAC;QAED,MAAM,CAAC,MAAM,CAAC;IACf,CAAC;IAED;;;;OAIG;IACH,oDAAe,GAAf;QACC,MAAM,CAAC,0BAA0B,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC;IACzD,CAAC;IACF,iCAAC;AAAD,CA1DA,AA0DC,IAAA;AA1DY,kCAA0B,6BA0DtC,CAAA","file":"leaflet-tile-layer-definition.model.js","sourcesContent":["export class LeafletTileLayerDefinition {\n\n\tconstructor(\n\t\tpublic type: string,\n\t\tpublic url: string,\n\t\tpublic options: any) { }\n\n\n\t/**\n\t * Creates a TileLayer from the provided definition. This is a convenience function\n\t * to help with generating layers from objects.\n\t *\n\t * @param layerDef The layer to create\n\t * @returns {L.TileLayer} The TileLayer that has been created\n\t */\n\tpublic static createTileLayer(layerDef: LeafletTileLayerDefinition): L.TileLayer {\n\t\tlet layer: L.TileLayer;\n\n\t\tswitch (layerDef.type) {\n\t\t\tcase 'xyz':\n\t\t\t\tlayer = L.tileLayer(layerDef.url,  layerDef.options);\n\t\t\t\tbreak;\n\t\t\tcase 'wms':\n\t\t\tdefault:\n\t\t\t\tlayer = L.tileLayer.wms(layerDef.url,  layerDef.options);\n\t\t\t\tbreak;\n\t\t}\n\n\t\treturn layer;\n\t}\n\n\t/**\n\t * Creates a TileLayer for each key in the incoming map. This is a convenience function\n\t * for generating an associative array of layers from an associative array of objects\n\t *\n\t * @param layerDefs A map of key to tile layer definition\n\t * @returns {{[p: string]: L.TileLayer}} A new map of key to TileLayer\n\t */\n\tpublic static createTileLayers(layerDefs: { [ key: string ]: LeafletTileLayerDefinition }): { [ key: string ]: L.TileLayer } {\n\t\tlet layers: { [ key: string ]: L.TileLayer } = {};\n\n\t\tfor (let k in layerDefs) {\n\t\t\tif (layerDefs.hasOwnProperty(k)) {\n\t\t\t\tlayers[k] = (LeafletTileLayerDefinition.createTileLayer(layerDefs[k]));\n\t\t\t}\n\t\t}\n\n\t\treturn layers;\n\t}\n\n\t/**\n\t * Create a Tile Layer from the current state of this object\n\t *\n\t * @returns {L.TileLayer} A new TileLayer\n\t */\n\tcreateTileLayer(): L.TileLayer {\n\t\treturn LeafletTileLayerDefinition.createTileLayer(this);\n\t}\n}\n"]}