{"version":3,"sources":["leaflet/layers/leaflet-layers.directive.ts"],"names":[],"mappings":";AAAA,qBAAkE,eAAe,CAAC,CAAA;AAIlF,kCAAiC,2BAA2B,CAAC,CAAA;AAM7D;IASC,gCAAY,gBAAkC;QAC7C,IAAI,CAAC,gBAAgB,GAAG,gBAAgB,CAAC;IAC1C,CAAC;IAED,yCAAQ,GAAR;QAEC,wCAAwC;QACxC,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,gBAAgB,CAAC,MAAM,EAAE,CAAC;QAE1C,mGAAmG;QACnG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC;IAEjC,CAAC;IAED,4CAAW,GAAX,UAAY,OAAwC;QAEnD,iBAAiB;QACjB,EAAE,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;YACvB,IAAI,CAAC,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC,YAAY,CAAC;YACvC,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,aAAa,EAAE,CAAC,GAAG,EAAE,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC,aAAa,CAAC;YAEnF,IAAI,CAAC,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QACtB,CAAC;IAEF,CAAC;IAED;;;OAGG;IACK,0CAAS,GAAjB,UAAkB,SAAoB,EAAE,UAAqB;QAE5D,IAAI,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC;QAEnB,EAAE,CAAC,CAAC,IAAI,IAAI,GAAG,CAAC,CAAC,CAAC;YAEjB,IAAI,QAAQ,SAAW,CAAC;YACxB,IAAI,MAAM,SAAW,CAAC;YAEtB,EAAE,CAAC,CAAC,IAAI,IAAI,SAAS,CAAC,CAAC,CAAC;gBAAC,SAAS,GAAG,EAAE,CAAC;YAAC,CAAC;YAC1C,EAAE,CAAC,CAAC,IAAI,IAAI,UAAU,CAAC,CAAC,CAAC;gBAAC,UAAU,GAAG,EAAE,CAAC;YAAC,CAAC;YAE5C,0DAA0D;YAC1D,QAAQ,GAAG,UAAU;iBACnB,MAAM,CAAC,UAAC,EAAE;gBACV,MAAM,CAAC,CAAC,CAAC,SAAS,CAAC,IAAI,CAAC,UAAC,EAAE,IAAO,MAAM,CAAC,CAAC,EAAE,KAAK,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YAC3D,CAAC,CAAC,CAAC;YAEJ,wDAAwD;YACxD,MAAM,GAAG,SAAS;iBAChB,MAAM,CAAC,UAAC,EAAE;gBACV,MAAM,CAAC,CAAC,CAAC,UAAU,CAAC,IAAI,CAAC,UAAC,EAAE,IAAO,MAAM,CAAC,CAAC,EAAE,KAAK,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YAC5D,CAAC,CAAC,CAAC;YAEJ,oBAAoB;YACpB,QAAQ,CAAC,OAAO,CAAC,UAAC,CAAC,IAAO,GAAG,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YAEjD,qBAAqB;YACrB,MAAM,CAAC,OAAO,CAAC,UAAC,CAAC,IAAO,GAAG,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAE7C,CAAC;IAEF,CAAC;IAhED;QAAC,YAAK,CAAC,eAAe,CAAC;;0DAAA;IAVxB;QAAC,gBAAS,CAAC;YACV,QAAQ,EAAE,iBAAiB;SAC3B,CAAC;;8BAAA;IA0EF,6BAAC;AAAD,CAzEA,AAyEC,IAAA;AAzEY,8BAAsB,yBAyElC,CAAA","file":"leaflet-layers.directive.js","sourcesContent":["import { Directive, Input, OnChanges, OnInit, SimpleChange } from '@angular/core';\n\nimport * as L from 'leaflet';\n\nimport { LeafletDirective } from '../core/leaflet.directive';\nimport { LeafletUtil } from '../util/leaflet-util';\n\n@Directive({\n\tselector: '[leafletLayers]'\n})\nexport class LeafletLayersDirective\n\timplements OnChanges, OnInit {\n\n\tmap: L.Map;\n\tleafletDirective: LeafletDirective;\n\n\t// Array of configured layers\n\t@Input('leafletLayers') layers: L.Layer [];\n\n\tconstructor(leafletDirective: LeafletDirective) {\n\t\tthis.leafletDirective = leafletDirective;\n\t}\n\n\tngOnInit() {\n\n\t\t// Get the map from the parent directive\n\t\tthis.map = this.leafletDirective.getMap();\n\n\t\t// The way we've set this up, map isn't set until after the first round of changes has gone through\n\t\tthis.setLayers(this.layers, []);\n\n\t}\n\n\tngOnChanges(changes: { [key: string]: SimpleChange }) {\n\n\t\t// Set the layers\n\t\tif (changes['layers']) {\n\t\t\tlet c = changes['layers'].currentValue;\n\t\t\tlet p = (changes['layers'].isFirstChange()) ? [] : changes['layers'].previousValue;\n\n\t\t\tthis.setLayers(c, p);\n\t\t}\n\n\t}\n\n\t/**\n\t * Replace the current layers in the map with the provided array\n\t * @param layers The new complete array of layers for the map\n\t */\n\tprivate setLayers(newLayers: L.Layer[], prevLayers: L.Layer[]) {\n\n\t\tlet map = this.map;\n\n\t\tif (null != map) {\n\n\t\t\tlet toRemove: L.Layer[];\n\t\t\tlet layers: L.Layer[];\n\n\t\t\tif (null == newLayers) { newLayers = []; }\n\t\t\tif (null == prevLayers) { prevLayers = []; }\n\n\t\t\t// Figure out which layers need to be removed (prev - new)\n\t\t\ttoRemove = prevLayers\n\t\t\t\t.filter((pl) => {\n\t\t\t\t\treturn !(newLayers.find((nl) => { return (pl === nl); }));\n\t\t\t\t});\n\n\t\t\t// Figure out which layers need to be added (new - prev)\n\t\t\tlayers = newLayers\n\t\t\t\t.filter((pl) => {\n\t\t\t\t\treturn !(prevLayers.find((nl) => { return (pl === nl); }));\n\t\t\t\t});\n\n\t\t\t// Remove the layers\n\t\t\ttoRemove.forEach((l) => { map.removeLayer(l); });\n\n\t\t\t// Add the new layers\n\t\t\tlayers.forEach((l) => { map.addLayer(l); });\n\n\t\t}\n\n\t}\n\n}\n"]}