{"version":3,"sources":["leaflet/layers/base/leaflet-baselayers.directive.ts"],"names":[],"mappings":";AAAA,qBAAkE,eAAe,CAAC,CAAA;AAIlF,kCAAiC,8BAA8B,CAAC,CAAA;AAChE,0CAAwC,sCAAsC,CAAC,CAAA;AAC/E,+CAA4C,2CAA2C,CAAC,CAAA;AACxF,oDAA2C,gDAAgD,CAAC,CAAA;AAM5F;IAWC,oCAAY,gBAAkC;QAC7C,IAAI,CAAC,gBAAgB,GAAG,IAAI,mDAAuB,CAAC,gBAAgB,CAAC,CAAC;QACtE,IAAI,CAAC,aAAa,GAAG,IAAI,4DAA2B,EAAE,CAAC;IACxD,CAAC;IAED,6CAAQ,GAAR;QAEC,IAAI,CAAC,gBAAgB,CAAC,IAAI,EAAE,CAAC;QAE7B,kCAAkC;QAClC,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,oBAAoB,CAAC,CAAC;IAEvE,CAAC;IAED,gDAAW,GAAX,UAAY,OAAwC;QAEnD,yBAAyB;QACzB,EAAE,CAAC,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;YAC3B,IAAI,CAAC,aAAa,CACjB,OAAO,CAAC,YAAY,CAAC,CAAC,YAAY,EAClC,OAAO,CAAC,YAAY,CAAC,CAAC,aAAa,CAAC,CAAC;QACvC,CAAC;IAEF,CAAC;IAES,yDAAoB,GAA9B,UAA+B,UAAe,EAAE,cAAmB;QAClE,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,EAAE,UAAU,EAAE,UAAU,EAAE,EAAE,cAAc,CAAC,CAAC;IACrE,CAAC;IAES,kDAAa,GAAvB,UAAwB,aAAqC,EAAE,cAAsC;QACpG,IAAI,CAAC,aAAa,CAAC,sBAAsB,CAAC,IAAI,gEAA0B,CAAC,aAAa,CAAC,EAAE,IAAI,gEAA0B,CAAC,cAAc,CAAC,CAAC,CAAC;IAC1I,CAAC;IAtCD;QAAC,YAAK,CAAC,mBAAmB,CAAC;;kEAAA;IAE3B;QAAC,YAAK,CAAC,6BAA6B,CAAC;;4EAAA;IATtC;QAAC,gBAAS,CAAC;YACV,QAAQ,EAAE,qBAAqB;SAC/B,CAAC;;kCAAA;IA6CF,iCAAC;AAAD,CA5CA,AA4CC,IAAA;AA5CY,kCAA0B,6BA4CtC,CAAA","file":"leaflet-baselayers.directive.js","sourcesContent":["import { Directive, Input, OnChanges, OnInit, SimpleChange } from '@angular/core';\n\nimport * as L from 'leaflet';\n\nimport { LeafletDirective } from '../../core/leaflet.directive';\nimport { LeafletDirectiveWrapper } from '../../core/leaflet.directive.wrapper';\nimport { LeafletControlLayersWrapper } from '../control/leaflet-control-layers.wrapper';\nimport { LeafletControlLayersConfig } from '../control/leaflet-control-layers-config.model';\n\n\n@Directive({\n\tselector: '[leafletBaseLayers]'\n})\nexport class LeafletBaseLayersDirective\n\timplements OnChanges, OnInit {\n\n\t// Base Layers\n\t@Input('leafletBaseLayers') baseLayers: any;\n\n\t@Input('leafletLayersControlOptions') layersControlOptions: any;\n\n\tprivate leafletDirective: LeafletDirectiveWrapper;\n\tprivate controlLayers: LeafletControlLayersWrapper;\n\n\tconstructor(leafletDirective: LeafletDirective) {\n\t\tthis.leafletDirective = new LeafletDirectiveWrapper(leafletDirective);\n\t\tthis.controlLayers = new LeafletControlLayersWrapper();\n\t}\n\n\tngOnInit() {\n\n\t\tthis.leafletDirective.init();\n\n\t\t// Set up all the initial settings\n\t\tthis.initializeBaseLayers(this.baseLayers, this.layersControlOptions);\n\n\t}\n\n\tngOnChanges(changes: { [key: string]: SimpleChange }) {\n\n\t\t// Set the new baseLayers\n\t\tif (changes['baseLayers']) {\n\t\t\tthis.setBaseLayers(\n\t\t\t\tchanges['baseLayers'].currentValue,\n\t\t\t\tchanges['baseLayers'].previousValue);\n\t\t}\n\n\t}\n\n\tprotected initializeBaseLayers(baseLayers: any, controlOptions: any) {\n\t\tthis.controlLayers.init({ baseLayers: baseLayers }, controlOptions);\n\t}\n\n\tprotected setBaseLayers(newBaseLayers: L.control.LayersObject, prevBaseLayers: L.control.LayersObject) {\n\t\tthis.controlLayers.setLayersControlConfig(new LeafletControlLayersConfig(newBaseLayers), new LeafletControlLayersConfig(prevBaseLayers));\n\t}\n\n}\n"]}